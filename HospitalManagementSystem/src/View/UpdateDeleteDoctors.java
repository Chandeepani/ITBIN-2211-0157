/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DoctorsController;
import Model.DBSearch;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class UpdateDeleteDoctors extends javax.swing.JFrame {

    
    
    private DoctorsController DoctorsController;

    private DBSearch dbSearch;
    
    public UpdateDeleteDoctors() {
        initComponents();
        dbSearch = new DBSearch();

    }
    
    private void sendDataToController() {
        // Get the values from the fields
        String doctorID = DoctorIdInput.getText().trim();
        String fullName = fullNameInput.getText().trim();
        String specialization = specializationInput.getText().trim();
        String phoneNumber = contactNumberInput.getText().trim();
        String yearsOfExperience = yearsOfExperienceInput.getText().trim();
        

        // Check if any of the fields are blank
        if (doctorID.isEmpty() || fullName.isEmpty() || specialization.isEmpty() || 
                phoneNumber.isEmpty() || yearsOfExperience.isEmpty()) {
            // Show an error message
            JOptionPane.showMessageDialog(null, "All fields must be filled out", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Send data to the controller
            DoctorsController.Doctors(doctorID, fullName, specialization, 
                    phoneNumber, yearsOfExperience);
        }
    }

    public void clearField() {
        DoctorIdInput.setText("");
        fullNameInput.setText("");
        contactNumberInput.setText("");
        yearsOfExperienceInput.setText("");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeBtn = new javax.swing.JLabel();
        UpdateDoctorBtn = new javax.swing.JButton();
        DeleteDoctorBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DoctorIdText = new javax.swing.JLabel();
        DoctorIdInput = new javax.swing.JTextField();
        fullNameText = new javax.swing.JLabel();
        fullNameInput = new javax.swing.JTextField();
        specializationLable = new javax.swing.JLabel();
        specializationInput = new javax.swing.JTextField();
        contactNumberLable = new javax.swing.JLabel();
        contactNumberInput = new javax.swing.JTextField();
        yearsOfExperienceLabel = new javax.swing.JLabel();
        yearsOfExperienceInput = new javax.swing.JTextField();
        getDoctorDataBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        closeBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        closeBtn.setText("X");
        closeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeBtnMouseClicked(evt);
            }
        });

        UpdateDoctorBtn.setText("Update Doctor Details");
        UpdateDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateDoctorBtnActionPerformed(evt);
            }
        });

        DeleteDoctorBtn.setText("Delete Doctor Details");
        DeleteDoctorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteDoctorBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dubai", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("  Hospital Management System - Update Or Delete Doctors");

        DoctorIdText.setText("Doctor ID");

        DoctorIdInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorIdInputActionPerformed(evt);
            }
        });

        fullNameText.setText("Full Name");

        fullNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullNameInputActionPerformed(evt);
            }
        });

        specializationLable.setText("Specialization");

        specializationInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specializationInputActionPerformed(evt);
            }
        });

        contactNumberLable.setText("Contact Number");

        yearsOfExperienceLabel.setText("Years Of Experience");

        yearsOfExperienceInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearsOfExperienceInputActionPerformed(evt);
            }
        });

        getDoctorDataBtn.setText("Get Data");
        getDoctorDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDoctorDataBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(DeleteDoctorBtn)
                        .addGap(231, 231, 231)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(UpdateDoctorBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(yearsOfExperienceLabel)
                                .addGap(18, 18, 18)
                                .addComponent(yearsOfExperienceInput))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(specializationLable)
                                    .addComponent(fullNameText))
                                .addGap(52, 52, 52)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 57, Short.MAX_VALUE)
                                        .addComponent(DoctorIdText)
                                        .addGap(18, 18, 18)
                                        .addComponent(DoctorIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(getDoctorDataBtn))
                                    .addComponent(specializationInput)
                                    .addComponent(fullNameInput, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(contactNumberLable)
                                .addGap(38, 38, 38)
                                .addComponent(contactNumberInput)))))
                .addGap(100, 100, 100))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeBtn)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(closeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DoctorIdText)
                    .addComponent(DoctorIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(getDoctorDataBtn))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fullNameText)
                    .addComponent(fullNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specializationLable)
                    .addComponent(specializationInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactNumberLable)
                    .addComponent(contactNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearsOfExperienceLabel)
                    .addComponent(yearsOfExperienceInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UpdateDoctorBtn)
                    .addComponent(DeleteDoctorBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateDoctorBtnActionPerformed
        String doctorID = DoctorIdInput.getText().trim();
        String fullName = fullNameInput.getText().trim();
        String specialization = specializationInput.getText().trim();
        String phoneNumber = contactNumberInput.getText().trim();
        String yearsOfExperience = yearsOfExperienceInput.getText().trim();

        if (doctorID.isEmpty() || fullName.isEmpty() || specialization.isEmpty() || 
                phoneNumber.isEmpty() || yearsOfExperience.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled out", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            boolean success = DoctorsController.updateDoctor(doctorID, fullName, specialization, 
                    phoneNumber, yearsOfExperience);
            if (success) {
                JOptionPane.showMessageDialog(null, "doctor information updated successfully", 
                        "Update Successful", JOptionPane.INFORMATION_MESSAGE);
                clearField();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update doctor information", 
                        "Update Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_UpdateDoctorBtnActionPerformed

    private void closeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeBtnMouseClicked
        dispose();
    }//GEN-LAST:event_closeBtnMouseClicked

    private void DeleteDoctorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteDoctorBtnActionPerformed
        String doctorID = DoctorIdInput.getText().trim();

    if (doctorID.isEmpty()) {
        JOptionPane.showMessageDialog(null, "doctor ID must be filled out", 
                "Input Error", JOptionPane.ERROR_MESSAGE);
    } else {
        int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this doctor?", 
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        
        if (confirmation == JOptionPane.YES_OPTION) {
            try {
                boolean success = DoctorsController.deleteDoctor(doctorID);
                
                if (success) {
                    JOptionPane.showMessageDialog(null, "doctor deleted successfully", 
                            "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
                    clearField();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to delete doctor", 
                            "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "An error occurred while deleting doctor", 
                        "Deletion Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    }//GEN-LAST:event_DeleteDoctorBtnActionPerformed

    private void DoctorIdInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorIdInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DoctorIdInputActionPerformed

    private void fullNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fullNameInputActionPerformed

    private void specializationInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specializationInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_specializationInputActionPerformed

    private void getDoctorDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDoctorDataBtnActionPerformed
        try {
            String doctorID = DoctorIdInput.getText().trim();

            if (doctorID == null) {
                JOptionPane.showMessageDialog(this, "Please Type a doctorID.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            ResultSet resultSet = dbSearch.searchDoctorDetailsByID(doctorID);

            if (resultSet != null && resultSet.next()) {
                fullNameInput.setText(resultSet.getString("doctorFullName"));
                specializationInput.setText(resultSet.getString("specialization"));
                contactNumberInput.setText(resultSet.getString("contactNumber"));
                yearsOfExperienceInput.setText(resultSet.getString("yearsOfExperience"));


            } else {
                JOptionPane.showMessageDialog(this, "No doctor found for the Typed doctorID.", "No Data", JOptionPane.INFORMATION_MESSAGE);
            }

            if (resultSet != null && !resultSet.isClosed()) {
                resultSet.close();
            }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "An error occurred while searching for doctors.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_getDoctorDataBtnActionPerformed

    private void yearsOfExperienceInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearsOfExperienceInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearsOfExperienceInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDoctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDoctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDoctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteDoctors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDeleteDoctors().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteDoctorBtn;
    private javax.swing.JTextField DoctorIdInput;
    private javax.swing.JLabel DoctorIdText;
    private javax.swing.JButton UpdateDoctorBtn;
    private javax.swing.JLabel closeBtn;
    private javax.swing.JTextField contactNumberInput;
    private javax.swing.JLabel contactNumberLable;
    private javax.swing.JTextField fullNameInput;
    private javax.swing.JLabel fullNameText;
    private javax.swing.JButton getDoctorDataBtn;
    private javax.swing.JButton getPatientDataBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField patientIdInput;
    private javax.swing.JTextField specializationInput;
    private javax.swing.JLabel specializationLable;
    private javax.swing.JTextField yearsOfExperienceInput;
    private javax.swing.JLabel yearsOfExperienceLabel;
    // End of variables declaration//GEN-END:variables
}
