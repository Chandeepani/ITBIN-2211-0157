/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Controller.PatientsController;
import Model.DBSearch;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

public class UpdateDeletePatients extends javax.swing.JFrame {

    private DBSearch dbSearch;

    public UpdateDeletePatients() {
        initComponents();
        dbSearch = new DBSearch();

    }
    
    private String getSelectedDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd"); // Set to yyyy-MM-dd format
        if (patientDOBDateChooser.getDate() != null) {
            return sdf.format(patientDOBDateChooser.getDate());
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid date.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    
    private void sendDataToController() {
        // Get the values from the fields
        String patientID = patientIdInput.getText().trim();
        String patientName = patientNameInput.getText().trim();
        String dob = getSelectedDate();
        String contactNumber = patientContactNumberInput.getText().trim();
        String medicalHistory = patientMedicalHistoryInput.getText().trim();


        // Check if any of the fields are blank
        if (patientID.isEmpty() || patientName.isEmpty() || dob.isEmpty() || contactNumber == null || medicalHistory.isEmpty()) {
            // Show an error message
            JOptionPane.showMessageDialog(null, "All fields must be filled out", "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Send data to the controller
            PatientsController.Patients(patientID, patientName, dob, contactNumber, medicalHistory);
        }
    }
    
    public void clearField() {
        patientIdInput.setText("");
        patientNameInput.setText("");
        patientDOBDateChooser.setDate(null);
        patientContactNumberInput.setText("");
        patientMedicalHistoryInput.setText("");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CloseBtn = new javax.swing.JLabel();
        SubTopic = new javax.swing.JLabel();
        getPatientDataBtn = new javax.swing.JButton();
        DeletePatientBtn = new javax.swing.JButton();
        UpdatePatientBtn = new javax.swing.JButton();
        patientIdLabel = new javax.swing.JLabel();
        patientIdInput = new javax.swing.JTextField();
        patientNameLabel = new javax.swing.JLabel();
        patientNameInput = new javax.swing.JTextField();
        patientDOBLable = new javax.swing.JLabel();
        patientDOBDateChooser = new com.toedter.calendar.JDateChooser();
        patientContactNumberLable = new javax.swing.JLabel();
        patientContactNumberInput = new javax.swing.JTextField();
        patientMedicalHistoryLable = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientMedicalHistoryInput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dubai", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("  Hospital Management System - Update Or Delete Patients");

        CloseBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CloseBtn.setText("X");
        CloseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseBtnMouseClicked(evt);
            }
        });

        SubTopic.setFont(new java.awt.Font("Dubai", 1, 22)); // NOI18N
        SubTopic.setForeground(new java.awt.Color(0, 0, 204));
        SubTopic.setToolTipText("");
        SubTopic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        getPatientDataBtn.setText("Get Data");
        getPatientDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPatientDataBtnActionPerformed(evt);
            }
        });

        DeletePatientBtn.setText("Delete Patients Details");
        DeletePatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePatientBtnActionPerformed(evt);
            }
        });

        UpdatePatientBtn.setText("Update Patients Details");
        UpdatePatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePatientBtnActionPerformed(evt);
            }
        });

        patientIdLabel.setText("Patient ID");

        patientIdInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientIdInputActionPerformed(evt);
            }
        });

        patientNameLabel.setText("Patient Name");

        patientDOBLable.setText("DOB");

        patientDOBDateChooser.setDateFormatString("yyyy/MM/dd");

        patientContactNumberLable.setText("Contact Number");

        patientMedicalHistoryLable.setText("Medical History");

        patientMedicalHistoryInput.setColumns(20);
        patientMedicalHistoryInput.setRows(5);
        jScrollPane1.setViewportView(patientMedicalHistoryInput);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CloseBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(DeletePatientBtn)
                                .addGap(18, 18, 18)
                                .addComponent(UpdatePatientBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SubTopic)
                                .addGap(0, 0, 0)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientIdLabel)
                                    .addComponent(patientDOBLable)
                                    .addComponent(patientContactNumberLable)
                                    .addComponent(patientNameLabel)
                                    .addComponent(patientMedicalHistoryLable))
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patientDOBDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(patientIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(getPatientDataBtn))
                                    .addComponent(patientContactNumberInput)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                                    .addComponent(patientNameInput))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(69, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(CloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(patientIdLabel)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(patientIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(getPatientDataBtn)))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(patientDOBLable)
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(patientContactNumberLable)
                                    .addComponent(patientContactNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(patientNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientNameLabel))
                                .addGap(18, 18, 18)
                                .addComponent(patientDOBDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SubTopic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(44, 44, 44)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(patientMedicalHistoryLable)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeletePatientBtn)
                            .addComponent(UpdatePatientBtn))
                        .addContainerGap(31, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseBtnMouseClicked
        dispose();
    }//GEN-LAST:event_CloseBtnMouseClicked

    private void getPatientDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPatientDataBtnActionPerformed
        try {
            String patientID = patientIdInput.getText().trim();

            if (patientID == null) {
                JOptionPane.showMessageDialog(this, "Please Type a patientID.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            ResultSet resultSet = dbSearch.searchPatientsDetailsByID(patientID);

            if (resultSet != null && resultSet.next()) {
                patientNameInput.setText(resultSet.getString("name"));
                patientContactNumberInput.setText(resultSet.getString("contactNumber"));
                patientMedicalHistoryInput.setText(resultSet.getString("medicalHistory"));
                
                String dateString = resultSet.getString("dateofbirth");
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                try {
                    Date date = dateFormat.parse(dateString);
                    patientDOBDateChooser.setDate(date);
                } catch (ParseException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid date format in database.", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "No patient found for the Typed patientID.", "No Data", JOptionPane.INFORMATION_MESSAGE);
            }

            if (resultSet != null && !resultSet.isClosed()) {
                resultSet.close();
            }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "An error occurred while searching for patients.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_getPatientDataBtnActionPerformed

    private void DeletePatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePatientBtnActionPerformed
        String patientID = patientIdInput.getText().trim();

        if (patientID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "patients patientID must be filled out",
                "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Confirm with the user before deleting
            int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this patients Details?",
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            // If user confirms deletion
            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    boolean success = PatientsController.deletePatients(patientID);

                    if (success) {
                        JOptionPane.showMessageDialog(null, "patients Details deleted successfully",
                            "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
                        // Clear the input fields after successful deletion
                        clearField();
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to delete patients",
                            "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    // Handle SQL exception
                    JOptionPane.showMessageDialog(null, "An error occurred while deleting patients",
                        "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_DeletePatientBtnActionPerformed

    private void UpdatePatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePatientBtnActionPerformed
        String patientID = patientIdInput.getText().trim();
        String patientName = patientNameInput.getText().trim();
        String dob = getSelectedDate();
        String contactNumber = patientContactNumberInput.getText().trim();
        String medicalHistory = patientMedicalHistoryInput.getText().trim();

        if (patientID.isEmpty() || patientName.isEmpty() || dob.isEmpty() || 
                contactNumber == null || medicalHistory.isEmpty()) {
            JOptionPane.showMessageDialog(null, "All fields must be filled out",
                "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            boolean success = false;
            try {
                success = PatientsController.updatePatient(patientID, patientName, 
                        dob, contactNumber, medicalHistory);
            } catch (SQLException ex) {
                    ex.printStackTrace();
            }
            if (success) {
                JOptionPane.showMessageDialog(null, "patient information updated successfully",
                    "Update Successful", JOptionPane.INFORMATION_MESSAGE);
                clearField();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update patients information",
                    "Update Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_UpdatePatientBtnActionPerformed

    private void patientIdInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientIdInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientIdInputActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDeletePatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDeletePatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDeletePatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDeletePatients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDeletePatients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CloseBtn;
    private javax.swing.JButton DeletePatientBtn;
    private javax.swing.JLabel SubTopic;
    private javax.swing.JButton UpdatePatientBtn;
    private javax.swing.JButton getPatientDataBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patientContactNumberInput;
    private javax.swing.JLabel patientContactNumberLable;
    private com.toedter.calendar.JDateChooser patientDOBDateChooser;
    private javax.swing.JLabel patientDOBLable;
    private javax.swing.JTextField patientIdInput;
    private javax.swing.JLabel patientIdLabel;
    private javax.swing.JTextArea patientMedicalHistoryInput;
    private javax.swing.JLabel patientMedicalHistoryLable;
    private javax.swing.JTextField patientNameInput;
    private javax.swing.JLabel patientNameLabel;
    // End of variables declaration//GEN-END:variables

}
